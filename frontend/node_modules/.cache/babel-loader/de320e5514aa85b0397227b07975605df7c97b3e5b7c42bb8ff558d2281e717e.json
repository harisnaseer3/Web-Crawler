{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('Response error:', error);\n  if (error.response) {\n    // Server responded with error status\n    console.error('Error data:', error.response.data);\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error('No response received:', error.request);\n  } else {\n    // Something else happened\n    console.error('Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Search API\nexport const searchAPI = {\n  search: async (query, limit = 10, offset = 0) => {\n    const response = await api.post('/search/', {\n      query,\n      limit,\n      offset\n    });\n    return response.data;\n  },\n  searchByDomain: async (domain, limit = 10, offset = 0) => {\n    const response = await api.get(`/search/domain/${domain}`, {\n      params: {\n        limit,\n        offset\n      }\n    });\n    return response.data;\n  },\n  getPopularKeywords: async (limit = 20) => {\n    const response = await api.get('/search/keywords/popular', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  getHostDetails: async ipAddress => {\n    const response = await api.get(`/search/host/${ipAddress}`);\n    return response.data;\n  },\n  getSearchAnalytics: async (limit = 50) => {\n    const response = await api.get('/search/analytics', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  }\n};\n\n// Crawler API\nexport const crawlerAPI = {\n  startCrawl: async (network = '0.0.0.0/0', maxIps = null) => {\n    const response = await api.post('/crawl/start', {\n      network,\n      max_ips: maxIps\n    });\n    return response.data;\n  },\n  stopCrawl: async () => {\n    const response = await api.post('/crawl/stop');\n    return response.data;\n  },\n  getStatus: async () => {\n    const response = await api.get('/crawl/status');\n    return response.data;\n  },\n  getStats: async () => {\n    const response = await api.get('/crawl/stats');\n    return response.data;\n  },\n  pauseCrawl: async () => {\n    const response = await api.post('/crawl/pause');\n    return response.data;\n  },\n  resumeCrawl: async () => {\n    const response = await api.post('/crawl/resume');\n    return response.data;\n  },\n  populateQueue: async (network = '0.0.0.0/0', count = 1000) => {\n    const response = await api.post('/crawl/queue/populate', null, {\n      params: {\n        network,\n        count\n      }\n    });\n    return response.data;\n  },\n  getQueueStats: async () => {\n    const response = await api.get('/crawl/queue/stats');\n    return response.data;\n  },\n  listPositives: async (limit = 20, offset = 0) => {\n    const response = await api.get('/crawl/positives', {\n      params: {\n        limit,\n        offset\n      }\n    });\n    return response.data;\n  },\n  addUrlToQueue: async (url, startIfStopped = false) => {\n    const response = await api.post('/crawl/queue/add_url', {\n      url,\n      start_if_stopped: startIfStopped\n    });\n    return response.data;\n  },\n  getRecentDetectedIps: async (limit = 50) => {\n    const response = await api.get('/crawl/live/positives_ips', {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  }\n};\n\n// Health check\nexport const healthAPI = {\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","data","message","searchAPI","search","query","limit","offset","post","searchByDomain","domain","get","params","getPopularKeywords","getHostDetails","ipAddress","getSearchAnalytics","crawlerAPI","startCrawl","network","maxIps","max_ips","stopCrawl","getStatus","getStats","pauseCrawl","resumeCrawl","populateQueue","count","getQueueStats","listPositives","addUrlToQueue","startIfStopped","start_if_stopped","getRecentDetectedIps","healthAPI","check"],"sources":["C:/laragon/www/crawler/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error);\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      console.error('Error data:', error.response.data);\r\n    } else if (error.request) {\r\n      // Request was made but no response received\r\n      console.error('No response received:', error.request);\r\n    } else {\r\n      // Something else happened\r\n      console.error('Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Search API\r\nexport const searchAPI = {\r\n  search: async (query, limit = 10, offset = 0) => {\r\n    const response = await api.post('/search/', {\r\n      query,\r\n      limit,\r\n      offset,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  searchByDomain: async (domain, limit = 10, offset = 0) => {\r\n    const response = await api.get(`/search/domain/${domain}`, {\r\n      params: { limit, offset },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getPopularKeywords: async (limit = 20) => {\r\n    const response = await api.get('/search/keywords/popular', {\r\n      params: { limit },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getHostDetails: async (ipAddress) => {\r\n    const response = await api.get(`/search/host/${ipAddress}`);\r\n    return response.data;\r\n  },\r\n\r\n  getSearchAnalytics: async (limit = 50) => {\r\n    const response = await api.get('/search/analytics', {\r\n      params: { limit },\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Crawler API\r\nexport const crawlerAPI = {\r\n  startCrawl: async (network = '0.0.0.0/0', maxIps = null) => {\r\n    const response = await api.post('/crawl/start', {\r\n      network,\r\n      max_ips: maxIps,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  stopCrawl: async () => {\r\n    const response = await api.post('/crawl/stop');\r\n    return response.data;\r\n  },\r\n\r\n  getStatus: async () => {\r\n    const response = await api.get('/crawl/status');\r\n    return response.data;\r\n  },\r\n\r\n  getStats: async () => {\r\n    const response = await api.get('/crawl/stats');\r\n    return response.data;\r\n  },\r\n\r\n  pauseCrawl: async () => {\r\n    const response = await api.post('/crawl/pause');\r\n    return response.data;\r\n  },\r\n\r\n  resumeCrawl: async () => {\r\n    const response = await api.post('/crawl/resume');\r\n    return response.data;\r\n  },\r\n\r\n  populateQueue: async (network = '0.0.0.0/0', count = 1000) => {\r\n    const response = await api.post('/crawl/queue/populate', null, {\r\n      params: { network, count },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getQueueStats: async () => {\r\n    const response = await api.get('/crawl/queue/stats');\r\n    return response.data;\r\n  },\r\n\r\n  listPositives: async (limit = 20, offset = 0) => {\r\n    const response = await api.get('/crawl/positives', {\r\n      params: { limit, offset },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  addUrlToQueue: async (url, startIfStopped = false) => {\r\n    const response = await api.post('/crawl/queue/add_url', {\r\n      url,\r\n      start_if_stopped: startIfStopped,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getRecentDetectedIps: async (limit = 50) => {\r\n    const response = await api.get('/crawl/live/positives_ips', { params: { limit } });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Health check\r\nexport const healthAPI = {\r\n  check: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}